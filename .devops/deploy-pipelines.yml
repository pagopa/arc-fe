# Azure DevOps pipeline to release a new version and deploy to production.

trigger:
  branches:
    include:
      - develop
      - uat
      - main
  paths:
    include:
      - src/*

pr: none

variables:
  NODE_VERSION: '22.11.0'
  npm_config_cache: $(Pipeline.Workspace)/.npm
  vmImageNameDefault: 'ubuntu-latest'
  cdn_logos: 'https://assets.cdn.io.italia.it/logos/organizations'
  assistance_link: 'https://pagopa.gov.it'

  ${{ if eq(variables['Build.SourceBranch'], 'refs/heads/uat') }}:
    environment: 'UAT'
    azure_subscription: '$(UAT_AZURE_SUBSCRIPTION)'
    cdn_endpoint: '$(UAT_CDN_ENDPOINT)'
    cdn_profile: '$(UAT_CDN_PROFILE)'
    resource_group: '$(UAT_STORAGE_ACCOUNT_RG)'
    storage_account: '$(UAT_STORAGE_ACCOUNT_NAME)'
    login_url: '$(UAT_APIM_PREFIX_DOMAIN)/arc/v1/login/oneidentity'
    api_host: '$(UAT_APIM_PREFIX_DOMAIN)/arc/v1'
    api_timeout: '10000'
    checkout_host: '$(UAT_CHECKOUT_PREFIX_DOMAIN)'
    checkout_platform_url: '$(UAT_CHECKOUT_PLATFORM_URL)'
    payment_return_url: '$(UAT_PAYMENT_RETURN_URL)'

  ${{ elseif eq(variables['Build.SourceBranch'], 'refs/heads/main') }}:
    environment: 'PROD'
    azure_subscription: '$(PROD_AZURE_SUBSCRIPTION)'
    cdn_endpoint: '$(PROD_CDN_ENDPOINT)'
    cdn_profile: '$(PROD_CDN_PROFILE)'
    resource_group: '$(PROD_STORAGE_ACCOUNT_RG)'
    storage_account: '$(PROD_STORAGE_ACCOUNT_NAME)'
    login_url: '$(PROD_APIM_PREFIX_DOMAIN)/arc/v1/login/oneidentity'
    api_host: '$(PROD_APIM_PREFIX_DOMAIN)/arc/v1'
    api_timeout: '10000'
    checkout_host: '$(PROD_CHECKOUT_PREFIX_DOMAIN)'
    checkout_platform_url: '$(PROD_CHECKOUT_PLATFORM_URL)'
    payment_return_url: '$(PROD_PAYMENT_RETURN_URL)'

  # every branch different from past will be considered as DEV
  ${{ else }}:
    environment: 'DEV'
    azure_subscription: '$(DEV_AZURE_SUBSCRIPTION)'
    cdn_endpoint: '$(DEV_CDN_ENDPOINT)'
    cdn_profile: '$(DEV_CDN_PROFILE)'
    resource_group: '$(DEV_STORAGE_ACCOUNT_RG)'
    storage_account: '$(DEV_STORAGE_ACCOUNT_NAME)'
    login_url: '$(DEV_APIM_PREFIX_DOMAIN)/arc/v1/login/oneidentity'
    api_host: '$(DEV_APIM_PREFIX_DOMAIN)/arc/v1'
    api_timeout: '0'
    checkout_host: '$(DEV_CHECKOUT_PREFIX_DOMAIN)'
    checkout_platform_url: '$(DEV_CHECKOUT_PLATFORM_URL)'
    payment_return_url: '$(DEV_PAYMENT_RETURN_URL)'

resources:
  repositories:
    - repository: pagopaCommons
      type: github
      name: pagopa/azure-pipeline-templates
      ref: refs/tags/v19
      # Cannot use variables here!
      endpoint: 'azure-devops-github-ro'

pool:
  vmImage: '$(vmImageNameDefault)'

stages:
  - stage: prepare_artifact
    displayName: 'Build ${{ variables.environment }} apps'
    jobs:
      - job: job_build
        displayName: Build
        steps:
          - template: local-templates/node-job-setup.yaml

          - template: local-templates/setup-env.yaml
            parameters:
              api_host: '$(api_host)'
              api_timeout: '$(api_timeout)'
              env: '$(environment)'
              cdn_logos: '$(cdn_logos)'
              assistance_link: '$(assistance_link)'
              checkout_host: '$(checkout_host)'
              login_url: '$(login_url)'
              checkout_platform_url: '$(checkout_platform_url)'
              payment_return_url: '$(payment_return_url)'
              deploy_path: '$(DEPLOY_PATH)'
              version: '$(Build.SourceBranchName):$(Build.SourceVersion)'

          # Unfortunately this is required because the parcel-reporter-static-files-copy parcel plugin
          # does not load the .env file through the dotenv package
          - script: export ENV=$(environment)
            displayName: 'Set environment ENV variable'

          - script: |
              yarn build
            displayName: 'yarn build'

          - publish: dist
            artifact: Bundle

  # Deploy bundle
  - stage: stage_deploy
    displayName: 'Deploy to ${{ variables.environment }} storage'
    condition: succeeded()
    jobs:
      - job: job_deploy
        displayName: 'Deploy'
        steps:
          - checkout: none

          - download: current
            artifact: Bundle

          - task: AzureCLI@2
            displayName: 'Sync storage'
            inputs:
              azureSubscription: '$(AZURE_SUBSCRIPTION)'
              scriptType: 'bash'
              scriptLocation: inlineScript
              inlineScript: |
                az storage blob sync --container '$web' --account-name $(storage_account) --source "$(Pipeline.Workspace)/Bundle"

          - task: AzureCLI@1
            displayName: 'Purge CDN endpoint'
            inputs:
              azureSubscription: '$(AZURE_SUBSCRIPTION)'
              scriptLocation: inlineScript
              inlineScript: |
                az cdn endpoint purge -g $(resource_group) -n $(cdn_endpoint) --profile-name $(cdn_profile) --content-paths "/*"
